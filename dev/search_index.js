var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PortMidi","category":"page"},{"location":"#PortMidi","page":"Home","title":"PortMidi","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PortMidi.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia wrapper for the C library PortMidi.  See the C documentation for a list of functions. ","category":"page"},{"location":"#Current-state","page":"Home","title":"Current state","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At this point, the package has not much Julia specific helper functions. Such helper functions will be developed in the future but we aim to keep the design as minimal as possible to remain as portable as the underlying C library.","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the examples folder for two small test cases. ","category":"page"},{"location":"#Playing-music","page":"Home","title":"Playing music","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A more detailed tutorial on how to use PortMidi for real time control of virtual instruments, see  Setup.","category":"page"},{"location":"setup/#Setup-instructions-for-playing-music","page":"Setup","title":"Setup instructions for playing music","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"PortMidi can be used to play (virtual or electronic) musical instruments in real-time.  In the following, we briefly outline how to configure your computer for this case.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"Here, we will use two standalone virutal instruments to get a uncomplicated setup.  The more powerful option is of course the use of a digitial audio workstation (DAW)  which can also recived and forward MIDI data to the instruments loaded within the DAW.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"The following text is a selection of options and clearly subject to personal opinion.  ","category":"page"},{"location":"setup/#Overview","page":"Setup","title":"Overview","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"In principle three steps are sufficient:","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"Install standalone virtual instrument.\nCreate MIDI output channel (with Pm_CreateVirtualOutput on linux and macOS, with loopMIDI on Windows).\nConfigure instrument to listen to MIDI and sent note on/off commands to play music.","category":"page"},{"location":"setup/#Installation","page":"Setup","title":"Installation","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"The easiest option is to install a standalone virtual instrument such as ","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"Decent Sampler\nVital Synth\nSurge XT\n(search the internet for your instrument of choice)","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"If you want to try a DAW instead (which gives also access to virtual instruments without standalone mode). A DAW allows to record audio and MIDI, arrange MIDI tracks and load virtual instruments and audio effects.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"One free open-source cross-platform option is LMMS. Another 'almost free' option is Reaper, which has a pretty generous trail option (just a dialog bugging at the start-up, even after the expire of the trial phase). Obviously, many free and paid alternatives exist.","category":"page"},{"location":"setup/#Create-MIDI-output-channel","page":"Setup","title":"Create MIDI output channel","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"First, we need to create a new MIDI output channel for sending MIDI messages from Julia to the virtual instrument. On Windows this requires an extra program, for the other platforms portmidi itself can create the channel.","category":"page"},{"location":"setup/#Linux-and-macOS","page":"Setup","title":"Linux and macOS","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"On linux and macOS one can use the Pm_CreateVirtualOutput(name::String, interface::String, deviceinfo::Ptr) function, see C docs for the explaination. The third input should always be C_NULL. The output is either the error message or the new id.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"This part of the documentation is untested, please open an issue if the instructions no not work","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"using PortMidi\n\nPm_Initialize()\n\n# create virtual input\ninterface = Sys.islinux() ? \"ALSA\" : \"CoreMIDI\"\nid_or_err = Pm_CreateVirtualOutput(\"Julia MIDI Out\", interface, C_NULL) \n\n# check error\nif Int(id_or_err) < 0\n    error(\"Could not open a virtual output device.\\n\\\n           PortMidi error: '\", string(id_or_err), \"'\")\nend\n\n# obtain ID\nid = Int(id_or_err)","category":"page"},{"location":"setup/#Windows","page":"Setup","title":"Windows","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"The Pm_CreateVirtualOutput function is not implemented since the interface MMSystem does not provide a protable solution for this task. ","category":"page"},{"location":"setup/#Creating-a-MIDI-channel-with-loopMIDI","page":"Setup","title":"Creating a MIDI channel with loopMIDI","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"We can use the free program loopMIDI instead. ","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"Install loopMIDI. (Restart might be required.)\nCreate a new MIDI channel called loopMIDI Port and click the + button.","category":"page"},{"location":"setup/#Finding-an-existing-MIDI-channel-with-PortMIDI","page":"Setup","title":"Finding an existing MIDI channel with PortMIDI","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"After the MIDI channel is created, we just need to obtain its ID. Note that the ID index is 0-based. Important note: The first call of `PmInitialize()needs to happen after the MIDI channel was created. Alternatively, one needs to callPmTerminate()first beforePmInitialize()` to obtain the correct list of current channels._","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"The following code uses the Pm_GetDeviceInfo function which returns a C pointer to a PmDeviceInfo which has inparticular a name and output field, which we check to get the right channel.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"using PortMIDI\n\nPm_Initialize()\n\nid = findfirst(x -> unsafe_string(x.name) == \"loopMIDI Port\" && x.output > 0, (unsafe_load(Pm_GetDeviceInfo(i)) for i in 0:Pm_CountDevices()-1))-1\n\nif isnothing(id)\n    error(\"Could not find MIDI channel 'loopMIDI Port'.\")\nend","category":"page"},{"location":"setup/#Start-virtual-instrument-and-select-the-MIDI-channel-as-input","page":"Setup","title":"Start virtual instrument and select the MIDI channel as input","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"With standalone instruments: We now need to select the MIDI port Julia MIDI Out or loopMIDI Port in our virtual instrument. All programs have the options button in the top-left of the Window (Decent sampler/Surge XT: 'Options button', Vital: 'click the logo'). One might need to configure the audio output as well, depending on the setup.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"If using a DAW: Select in the options the right MIDI input and configure the audio driver for your system. Afterward, load a virtual instrument and arm the track to listen to MIDI input.","category":"page"},{"location":"setup/#Open-output-channel-with-PortMidi","page":"Setup","title":"Open output channel with PortMidi","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"Once we have obtained the ID of a working MIDI output channel and setup the instruments, we can open the MIDI channel and send messages. Below is one small example:","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"Create a reference to a pointer for the MIDI stream.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"stream = Ref{Ptr{PortMidi.PortMidiStream}}(C_NULL)\nPm_OpenOutput(stream, id, C_NULL, 0, C_NULL, C_NULL, 0)\n# don't forget to call later: Pm_Close(stream[])","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"MIDI note messages have to be compressed into 32 bits. We can use the Pm_Message function for this task, see C docs on PmEvents and Pm_Message for more details.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"Here, we just need to know that we need to provide a note on and note off messages. That is, ","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"a flag either 0x90 or 0x80 for note on/off events\nthe semitone of the note we want to play C4 = 60\nthe velocity of the keystroke","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"The following helper function allows us to play a note with a given duration.","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"Note_ON = 0x90\nNote_OFF = 0x80\nC4 = 60\n\nfunction play_note(stream, note, velocity, duration)\n    Pm_WriteShort(stream[], 0, Pm_Message(Note_ON, note, velocity))\n    sleep(duration)\n    Pm_WriteShort(stream[], 0, Pm_Message(Note_OFF, note, velocity))\nend","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"Finally, we can play some notes:","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"for i in 1:12\n    @async play_note(stream, C4 + rand([-5,-2,0,2,5]), rand(80:120), 0.4 + 0.05*rand())\n    sleep(0.5 + 0.05*rand())\nend","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"The @async helps us to meet the beat. However, for accurate timing one might need to use a different approach. (Ideas are welcome!)","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"If everything worked, you should head a small tune.","category":"page"},{"location":"setup/#Cleanup","page":"Setup","title":"Cleanup","text":"","category":"section"},{"location":"setup/","page":"Setup","title":"Setup","text":"Afterwards, we should close the MIDI stream and terminate PortMidi:","category":"page"},{"location":"setup/","page":"Setup","title":"Setup","text":"Pm_Close(stream[])\nPm_Terminate()","category":"page"}]
}
